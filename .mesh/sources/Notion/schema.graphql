schema {
  query: Query
}

type Query {
  page(id: ID): Page
  database(id: ID): Database
}

type Page {
  object: String
  id: String
  createdTime: DateTime
  lastEditedTime: DateTime
  createdBy: QueryPageCreatedBy
  lastEditedBy: QueryPageCreatedBy
  cover: QueryPageCover
  icon: QueryPageIcon
  parent: QueryPageParent
  archived: Boolean
  properties: QueryPage
  url: URL
  publicUrl: Void
}

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

type QueryPageCreatedBy {
  object: String
  id: String
}

type QueryPageCover {
  type: String
  external: QueryPageCoverExternal
}

type QueryPageCoverExternal {
  url: URL
}

"A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt."
scalar URL

type QueryPageIcon {
  type: String
  emoji: String
}

type QueryPageParent {
  type: String
  databaseId: String
}

type QueryPage {
  storeAvailability: QueryPageStoreAvailability
  foodGroup: QueryPageFoodGroup
  price: QueryPagePrice
  responsiblePerson: QueryPageResponsiblePerson
  lastOrdered: QueryPageLastOrdered
  costOfNextTrip: QueryPageCostOfNextTrip
  recipes: QueryPageRecipes
  description: QueryPageDescription
  inStock: QueryPageInStock
  numberOfMeals: QueryPageNumberOfMeals
  photo: QueryPagePhoto
  name: QueryPageName
}

type QueryPageStoreAvailability {
  id: String
  type: String
  multiSelect: [QueryPageStoreAvailabilityMultiSelectItems]
}

type QueryPageStoreAvailabilityMultiSelectItems {
  id: String
  name: String
  color: String
}

type QueryPageFoodGroup {
  id: String
  type: String
  select: QueryPageFoodGroupSelect
}

type QueryPageFoodGroupSelect {
  id: String
  name: String
  color: String
}

type QueryPagePrice {
  id: String
  type: String
  number: Float
}

type QueryPageResponsiblePerson {
  id: String
  type: String
  people: [QueryPageResponsiblePersonPeopleItems]
}

type QueryPageResponsiblePersonPeopleItems {
  object: String
  id: String
  name: String
  avatarUrl: URL
  type: String
  person: QueryPageResponsiblePersonPeopleItemsPerson
}

type QueryPageResponsiblePersonPeopleItemsPerson {
  email: EmailAddress
}

"A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/."
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

type QueryPageLastOrdered {
  id: String
  type: String
  date: QueryPageLastOrderedDate
}

type QueryPageLastOrderedDate {
  start: Date
  end: Void
  timeZone: Void
}

"Represents date values"
scalar Date

"Represents NULL values"
scalar Void

type QueryPageCostOfNextTrip {
  id: String
  type: String
  formula: QueryPageCostOfNextTripFormula
}

type QueryPageCostOfNextTripFormula {
  type: String
  number: Int
}

type QueryPageRecipes {
  id: String
  type: String
  relation: [QueryPageRecipesRelationItems]
  hasMore: Boolean
}

type QueryPageRecipesRelationItems {
  id: String
}

type QueryPageDescription {
  id: String
  type: String
  richText: [QueryPageDescriptionRichTextItems]
}

type QueryPageDescriptionRichTextItems {
  type: String
  text: QueryPageDescriptionRichTextItemsText
  annotations: QueryPageDescriptionRichTextItemsAnnotations
  plainText: String
  href: Void
}

type QueryPageDescriptionRichTextItemsText {
  content: String
  link: Void
}

type QueryPageDescriptionRichTextItemsAnnotations {
  bold: Boolean
  italic: Boolean
  strikethrough: Boolean
  underline: Boolean
  code: Boolean
  color: String
}

type QueryPageInStock {
  id: String
  type: String
  checkbox: Boolean
}

type QueryPageNumberOfMeals {
  id: String
  type: String
  rollup: QueryPageNumberOfMealsRollup
}

type QueryPageNumberOfMealsRollup {
  type: String
  number: Int
  function: String
}

type QueryPagePhoto {
  id: String
  type: String
  url: URL
}

type QueryPageName {
  id: String
  type: String
  title: [QueryPageDescriptionRichTextItems]
}

type Database {
  object: String
  id: String
  createdTime: DateTime
  lastEditedTime: DateTime
  icon: QueryPageIcon
  cover: QueryPageCover
  url: URL
  title: [QueryPageDescriptionRichTextItems]
  description: [QueryPageDescriptionRichTextItems]
  properties: QueryDatabase
  parent: QueryDatabaseParent
  archived: Boolean
  isInline: Boolean
  publicUrl: Void
}

type QueryDatabase {
  string1: QueryDatabaseString1
  inStock: QueryDatabaseInStock
  price: QueryDatabasePrice
  description: QueryDatabaseDescription
  lastOrdered: QueryDatabaseLastOrdered
  meals: QueryDatabaseMeals
  numberOfMeals: QueryDatabaseNumberOfMeals
  storeAvailability: QueryDatabaseStoreAvailability
  photo: QueryDatabasePhoto
  foodGroup: QueryDatabaseFoodGroup
  name: QueryDatabaseName
}

type QueryDatabaseString1 {
  id: String
  name: String
  type: String
  people: QueryDatabaseString1People
}

scalar QueryDatabaseString1People

type QueryDatabaseInStock {
  id: String
  name: String
  type: String
  checkbox: QueryDatabaseString1People
}

type QueryDatabasePrice {
  id: String
  name: String
  type: String
  number: QueryDatabasePriceNumber
}

type QueryDatabasePriceNumber {
  format: String
}

type QueryDatabaseDescription {
  id: String
  name: String
  type: String
  richText: QueryDatabaseString1People
}

type QueryDatabaseLastOrdered {
  id: String
  name: String
  type: String
  date: QueryDatabaseString1People
}

type QueryDatabaseMeals {
  id: String
  name: String
  type: String
  relation: QueryDatabaseMealsRelation
}

type QueryDatabaseMealsRelation {
  databaseId: String
  syncedPropertyName: String
}

type QueryDatabaseNumberOfMeals {
  id: String
  name: String
  type: String
  rollup: QueryDatabaseNumberOfMealsRollup
}

type QueryDatabaseNumberOfMealsRollup {
  rollupPropertyName: String
  relationPropertyName: String
  rollupPropertyId: String
  relationPropertyId: String
  function: String
}

type QueryDatabaseStoreAvailability {
  id: String
  name: String
  type: String
  multiSelect: QueryDatabaseStoreAvailabilityMultiSelect
}

type QueryDatabaseStoreAvailabilityMultiSelect {
  options: [QueryPageStoreAvailabilityMultiSelectItems]
}

type QueryDatabasePhoto {
  id: String
  name: String
  type: String
  files: QueryDatabaseString1People
}

type QueryDatabaseFoodGroup {
  id: String
  name: String
  type: String
  select: QueryDatabaseStoreAvailabilityMultiSelect
}

type QueryDatabaseName {
  id: String
  name: String
  type: String
  title: QueryDatabaseString1People
}

type QueryDatabaseParent {
  type: String
  pageId: String
}